#!/bin/bash

# Pause for a number of seconds, but allow interrupting the pause by pressing
# Enter (or Ctrl+C to cancel entirely).
#
# The first parameter to this function is the number of seconds.
# The second parameter is the message to show, with printf parameters:
# - %s: ISO 8601 date and time
# - %d: the number of seconds left
# - %s: the word "second" or "seconds"
#
# Example usage:
# pause-with-countdown 10; echo 'Was this worth the wait?';
#
# If you press Ctrl+C before the time is up, the echo will not be executed.

if [ $# -eq 0 ]; then
	echo 'Specify the number of seconds to pause.' 1>&2;
	return 22;
fi;

num_seconds_to_pause="$1";

if ! [[ "$num_seconds_to_pause" =~ ^[1-9][0-9]*$ ]]; then
	echo 'The number of seconds has to be a positive integer.' 1>&2;
	return 22;
fi;

shift;
if [ $# -eq 0 ]; then
	message_format='%s Waiting for %d %sâ€¦ (Press Enter to continue immediately, or Ctrl+C to cancel entirely.)';
else
	message_format="$*";
fi;

move_up="$(tput cuu1)"
clear_line="$(tput el)";
num_seconds_left="$num_seconds_to_pause";
start_timestamp="$(date +'%s')";
timestamp_format='[%Y-%m-%dT%H:%M:%S%z]';

# Print a line each second until the time runs out or the user presses Enter.
echo;
while [ $num_seconds_left -gt 0 ]; do
	timestamp="$(date +"$timestamp_format")";
	[ $num_seconds_left -eq 1 ] \
		&& time_unit=second \
		|| time_unit=seconds;
	printf "${move_up}${clear_line}$message_format\\n" "$timestamp" "$num_seconds_left" "$time_unit";
	if read -t 1; then
		num_seconds_left=0;
	else
		let num_seconds_left--;
	fi;
done;

# Show how long we actually waited.
end_timestamp="$(date +'%s')";
num_seconds_waited="$((end_timestamp - start_timestamp))";
[ $num_seconds_waited -eq 1 ] \
	&& time_unit=second \
	|| time_unit=seconds;
echo "${move_up}${clear_line}$(date +"$timestamp_format") Waited for $num_seconds_waited $time_unit.";
